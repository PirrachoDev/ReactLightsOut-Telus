{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","inherits","createClass","key","value","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","winMsg","showBoard","i","j","concat","src_Cell_0","flipCellsAround","defaultProps","App","apply","arguments","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2343169d.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n//HOW TO RESOLVE IT\n//https://www.logicgamesonline.com/lightsout/tutorial.html#:~:text=The%20easiest%20way%20to%20solve,are%20in%20the%20final%20row.\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    \n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"FLIPPING\", coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y-1,x);\n    flipCell(y,x);\n    flipCell(y+1,x);\n\n    flipCell(y,x-1);\n    flipCell(y,x+1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    function gameIsWon (){\n      let won = false;\n      for(let i = 0; i < board.length; i++) {\n        for(let j = 0; j < board[i].length; j++) {\n          if (board[i][j] === true) {\n            won = false;\n          } else {\n            won = true;\n          }\n        }\n      }\n      return won;\n    }\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n    let winMsg = <div><h1>Congratulations!</h1><h2>You won!</h2></div>;\n    let showBoard = <table className=\"Board\">\n    <tbody>\n      {\n        this.state.board.map(\n          (y, i) => <tr key={i}>\n            {y.map(\n              (x, j) => {\n                let coord = `${i}-${j}`;\n                return <Cell key={coord} isLit={x} flipCellsAroundMe={() => this.flipCellsAround(coord)}/>\n              }\n            )}\n          </tr>\n        )\n      }\n    </tbody>\n  </table>;\n    // TODO\n\n    // make table board\n    return this.state.hasWon ? winMsg : showBoard;\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}